---
import Layout from "../../layouts/Layout.astro";
import { getCollection } from 'astro:content';
import { getLangFromUrl } from '../../i18n/ui';

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  return posts
    .filter(post => post.data.lang === 'en')
    .map(post => ({
      params: { slug: post.slug },
      props: { post },
    }));
}

const { post } = Astro.props as { post: any };
const { Content } = await post.render();

// Get related posts based on tags
const allPosts = await getCollection('posts');
const relatedPosts = allPosts
  .filter((p: any) => 
    p.slug !== post.slug && 
    p.data.lang === 'en' &&
    p.data.tags.some((tag: string) => post.data.tags.includes(tag))
  )
  .sort((a: any, b: any) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
  .slice(0, 3);

const lang = getLangFromUrl(Astro.url);
---

<Layout 
  title={`${post.data.title} | Frontier Agency`} 
  description={post.data.description}
>
  <article class="container mx-auto px-4 py-16 max-w-4xl">
    <!-- Header -->
    <header class="mb-12">
      <!-- Title -->
      <h1 class="text-4xl md:text-5xl font-bold mb-6 leading-tight">
        {post.data.title}
      </h1>

      <!-- Meta -->
      <div class="flex flex-wrap items-center gap-4 text-gray-600 mb-8">
        <div class="flex items-center gap-2">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
          <span>{post.data.author}</span>
        </div>
        <div class="flex items-center gap-2">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
          <time datetime={post.data.date.toISOString()}>
            {post.data.date.toLocaleDateString('en-US', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}
          </time>
        </div>
      </div>

      <!-- Tags -->
      <div class="flex flex-wrap gap-2 mb-8">
        {post.data.tags.map(tag => (
          <a 
            href={`/posts/tag/${tag}/`}
            class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm hover:bg-blue-200 transition-colors"
          >
            #{tag}
          </a>
        ))}
      </div>

      <!-- Featured Image -->
      {post.data.image && (
        <div class="mb-8">
          <img 
            src={post.data.image} 
            alt={post.data.title}
            class="w-full h-64 md:h-96 object-cover rounded-lg shadow-lg"
          />
        </div>
      )}
    </header>

    <!-- Content -->
    <div class="prose prose-lg max-w-none mb-16">
      <Content />
    </div>

    <!-- Related Posts -->
    {relatedPosts.length > 0 && (
      <section class="border-t pt-12">
        <h2 class="text-2xl font-bold mb-8">Related Posts</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          {relatedPosts.map(relatedPost => (
            <article class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
              {relatedPost.data.image && (
                <div class="aspect-video overflow-hidden">
                  <img 
                    src={relatedPost.data.image} 
                    alt={relatedPost.data.title}
                    class="w-full h-full object-cover"
                  />
                </div>
              )}
              <div class="p-4">
                <h3 class="font-bold mb-2 line-clamp-2">
                  <a href={`/posts/${relatedPost.slug}/`} class="hover:text-blue-600 transition-colors">
                    {relatedPost.data.title}
                  </a>
                </h3>
                <p class="text-sm text-gray-600 line-clamp-2 mb-2">
                  {relatedPost.data.description}
                </p>
                <time class="text-xs text-gray-500">
                  {relatedPost.data.date.toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric' 
                  })}
                </time>
              </div>
            </article>
          ))}
        </div>
      </section>
    )}
  </article>
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Prose styles for Markdown content */
  .prose {
    color: #374151;
  }
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    color: #111827;
    font-weight: 700;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }
  .prose h1 { font-size: 2.25rem; }
  .prose h2 { font-size: 1.875rem; }
  .prose h3 { font-size: 1.5rem; }
  .prose h4 { font-size: 1.25rem; }
  .prose p {
    margin-bottom: 1.5rem;
    line-height: 1.75;
  }
  .prose ul, .prose ol {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }
  .prose li {
    margin-bottom: 0.5rem;
  }
  .prose blockquote {
    border-left: 4px solid #3b82f6;
    padding-left: 1rem;
    margin: 2rem 0;
    font-style: italic;
    color: #6b7280;
  }
  .prose code {
    background-color: #f3f4f6;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
  }
  .prose pre {
    background-color: #1f2937;
    color: #f9fafb;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
  }
  .prose pre code {
    background-color: transparent;
    padding: 0;
  }
  .prose img {
    border-radius: 0.5rem;
    margin: 1.5rem 0;
  }
  .prose a {
    color: #3b82f6;
    text-decoration: underline;
  }
  .prose a:hover {
    color: #2563eb;
  }
</style>

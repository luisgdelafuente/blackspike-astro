---

import X from '../assets/theme-images/icon-x.svg'
import { getLangFromUrl, useTranslations } from '../i18n/ui';

const { content } = Astro.props
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

---

<dialog id="demo" closedby="any" class="fixed inset-0 bg-bs-surface-0 m-auto z-50 p-6 md:p-12 rounded-xl w-full max-w-[95%] md:max-w-lg">

  <!-- Form -->
  <form 
    name="contact" 
    method="POST" 
    data-netlify="true" 
    data-netlify-honeypot="bot-field"
    netlify-honeypot="bot-field"
    class="flex gap-6 flex-col"
    id="contact-form"
  >
    <!-- Netlify form detection -->
    <input type="hidden" name="form-name" value="contact" />
    
    <!-- Honeypot field for spam protection -->
    <div class="hidden">
      <label for="bot-field">Don't fill this out if you're human:</label>
      <input name="bot-field" id="bot-field" />
    </div>

    <!-- Header -->
    <h2 class="text-2xl flex justify-between items-center gap-4">

      <span>{ content.title }</span>

      <button 
        type="button"
        onclick="this.closest('dialog').close('close')" 
        aria-label={t('close')}
        class="bs-btn rounded-full !p-0 flex items-center justify-center h-10 w-10"
      >

        <X class="scale-75 opacity-75" width="32" height="32" />

      </button>

    </h2>

    <!-- Content -->
    <div class="flex flex-col gap-4">

      <!-- Intro -->
      <div class="bs-body-text mb-3" set:html={ content.content } />

      <!-- Form inputs -->
      
      <!-- Name -->
      <div class="flex flex-col gap-2">
        <label for="name" class="text-sm font-medium text-bs-foreground-light">
          {t('form.name.label')} *
        </label>
        <input
          id="name"
          name="name"
          type="text"
          required
          class="border-2 rounded-lg bg-bs-surface-0 border-bs-surface-3 form-input px-4 py-3 focus:border-bs-primary focus:outline-none transition-colors"
          placeholder={t('form.name.placeholder')}
          aria-describedby="name-error"
        >
        <div id="name-error" class="text-red-500 text-sm hidden" role="alert"></div>
      </div>

      <!-- Company -->
      <div class="flex flex-col gap-2">
        <label for="company" class="text-sm font-medium text-bs-foreground-light">
          {t('form.company.label')}
        </label>
        <input
          id="company"
          name="company"
          type="text"
          class="border-2 rounded-lg bg-bs-surface-0 border-bs-surface-3 form-input px-4 py-3 focus:border-bs-primary focus:outline-none transition-colors"
          placeholder={t('form.company.placeholder')}
        >
      </div>

      <!-- Email -->
      <div class="flex flex-col gap-2">
        <label for="email" class="text-sm font-medium text-bs-foreground-light">
          {t('form.email.label')} *
        </label>
        <input
          id="email"
          name="email"
          type="email"
          required
          class="border-2 rounded-lg bg-bs-surface-0 border-bs-surface-3 form-input px-4 py-3 focus:border-bs-primary focus:outline-none transition-colors"
          placeholder={t('form.email.placeholder')}
          aria-describedby="email-error"
        >
        <div id="email-error" class="text-red-500 text-sm hidden" role="alert"></div>
      </div>

      <!-- Message -->
      <div class="flex flex-col gap-2">
        <label for="message" class="text-sm font-medium text-bs-foreground-light">
          {t('form.message.label')} *
        </label>
        <textarea
          id="message"
          name="message"
          required
          rows="4"
          class="border-2 rounded-lg bg-bs-surface-0 border-bs-surface-3 form-input px-4 py-3 focus:border-bs-primary focus:outline-none transition-colors resize-none"
          placeholder={t('form.message.placeholder')}
          aria-describedby="message-error"
        ></textarea>
        <div id="message-error" class="text-red-500 text-sm hidden" role="alert"></div>
      </div>

      <!-- Submit -->
      <button 
        type="submit" 
        class="bs-btn form-input px-4 py-3 disabled:opacity-50 disabled:cursor-not-allowed transition-opacity"
        id="submit-btn"
      >
        <span class="submit-text">{ content.cta }</span>
        <span class="loading-text hidden">{t('form.submitting')}</span>
      </button>

      <!-- Success/Error Messages -->
      <div id="form-message" class="hidden p-4 rounded-lg text-sm" role="alert"></div>

    </div>

  </form>

</dialog>

<script define:vars={{ t }}>
  // Form validation and submission handling
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form');
    const submitBtn = document.getElementById('submit-btn');
    const submitText = submitBtn?.querySelector('.submit-text');
    const loadingText = submitBtn?.querySelector('.loading-text');
    const formMessage = document.getElementById('form-message');

    if (!form || !submitBtn) return;

    // Use translations passed from Astro

    // Show error message
    function showError(fieldId, message) {
      const field = document.getElementById(fieldId);
      const errorDiv = document.getElementById(`${fieldId}-error`);
      
      if (field && errorDiv) {
        field.classList.add('border-red-500');
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
      }
    }

    // Clear error message
    function clearError(fieldId) {
      const field = document.getElementById(fieldId);
      const errorDiv = document.getElementById(`${fieldId}-error`);
      
      if (field && errorDiv) {
        field.classList.remove('border-red-500');
        errorDiv.classList.add('hidden');
      }
    }

    // Show form message
    function showMessage(message, isSuccess) {
      if (formMessage) {
        formMessage.textContent = message;
        formMessage.className = `p-4 rounded-lg text-sm ${isSuccess ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`;
        formMessage.classList.remove('hidden');
      }
    }

    // Validate form
    function validateForm() {
      let isValid = true;
      
      // Validate name
      const name = document.getElementById('name')?.value.trim();
      if (!name) {
        showError('name', t['form.validation.required']);
        isValid = false;
      } else {
        clearError('name');
      }

      // Validate email
      const email = document.getElementById('email')?.value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!email) {
        showError('email', t['form.validation.required']);
        isValid = false;
      } else if (!emailRegex.test(email)) {
        showError('email', t['form.validation.email']);
        isValid = false;
      } else {
        clearError('email');
      }

      // Validate message
      const message = document.getElementById('message')?.value.trim();
      if (!message) {
        showError('message', t['form.validation.required']);
        isValid = false;
      } else {
        clearError('message');
      }

      return isValid;
    }

    // Handle form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!validateForm()) return;

      // Show loading state
      submitBtn.disabled = true;
      submitText?.classList.add('hidden');
      loadingText?.classList.remove('hidden');
      formMessage?.classList.add('hidden');

      try {
        const formData = new FormData(form);
        const response = await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams(formData as any).toString()
        });

        if (response.ok) {
          // Redirect to thank you page
          const lang = window.location.pathname.startsWith('/es') ? 'es' : 'en';
          const thankYouUrl = lang === 'es' ? '/es/thank-you/' : '/thank-you/';
          window.location.href = thankYouUrl;
        } else {
          throw new Error('Form submission failed');
        }
      } catch (error) {
        showMessage(t['form.error'], false);
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitText?.classList.remove('hidden');
        loadingText?.classList.add('hidden');
      }
    });

    // Clear errors on input
    ['name', 'email', 'message'].forEach(fieldId => {
      const field = document.getElementById(fieldId);
      field?.addEventListener('input', () => clearError(fieldId));
    });
  });
</script>

<style>

html:has(dialog[open]) {
  overflow: hidden;
  backdrop-filter: blur(0);
  scrollbar-gutter: stable;
}

dialog[open]::backdrop {
  backdrop-filter: blur(50px);
}

@keyframes scale-up {

  to {
    translate: 0 0;
    scale: 1;
  }

}

@media (prefers-reduced-motion: no-preference) {

  dialog {
    translate: 0 2rem;
    scale: .8
  }

  dialog[open] {
    animation: scale-up forwards 1s;
    animation-timing-function: var(--ease-bs-spring);
  }

}

</style>